//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcApplication1.ImageService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Image", Namespace="http://schemas.datacontract.org/2004/07/Entities")]
    [System.SerializableAttribute()]
    public partial class Image : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long AccountIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileServiceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsRenewalNotificationSentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrientationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RenewalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> RenewalStatusDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockImageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ValidationDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AccountId {
            get {
                return this.AccountIdField;
            }
            set {
                if ((this.AccountIdField.Equals(value) != true)) {
                    this.AccountIdField = value;
                    this.RaisePropertyChanged("AccountId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileServiceId {
            get {
                return this.FileServiceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.FileServiceIdField, value) != true)) {
                    this.FileServiceIdField = value;
                    this.RaisePropertyChanged("FileServiceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsRenewalNotificationSent {
            get {
                return this.IsRenewalNotificationSentField;
            }
            set {
                if ((this.IsRenewalNotificationSentField.Equals(value) != true)) {
                    this.IsRenewalNotificationSentField = value;
                    this.RaisePropertyChanged("IsRenewalNotificationSent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Orientation {
            get {
                return this.OrientationField;
            }
            set {
                if ((object.ReferenceEquals(this.OrientationField, value) != true)) {
                    this.OrientationField = value;
                    this.RaisePropertyChanged("Orientation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RenewalStatus {
            get {
                return this.RenewalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.RenewalStatusField, value) != true)) {
                    this.RenewalStatusField = value;
                    this.RaisePropertyChanged("RenewalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> RenewalStatusDate {
            get {
                return this.RenewalStatusDateField;
            }
            set {
                if ((this.RenewalStatusDateField.Equals(value) != true)) {
                    this.RenewalStatusDateField = value;
                    this.RaisePropertyChanged("RenewalStatusDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StockImageId {
            get {
                return this.StockImageIdField;
            }
            set {
                if ((this.StockImageIdField.Equals(value) != true)) {
                    this.StockImageIdField = value;
                    this.RaisePropertyChanged("StockImageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ValidationDate {
            get {
                return this.ValidationDateField;
            }
            set {
                if ((this.ValidationDateField.Equals(value) != true)) {
                    this.ValidationDateField = value;
                    this.RaisePropertyChanged("ValidationDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ImageService.IImageService")]
    public interface IImageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/DownloadImage", ReplyAction="http://tempuri.org/IImageService/DownloadImageResponse")]
        string DownloadImage(long imageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/DownloadImage", ReplyAction="http://tempuri.org/IImageService/DownloadImageResponse")]
        System.Threading.Tasks.Task<string> DownloadImageAsync(long imageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/GetAllUserImageIds", ReplyAction="http://tempuri.org/IImageService/GetAllUserImageIdsResponse")]
        long[] GetAllUserImageIds(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/GetAllUserImageIds", ReplyAction="http://tempuri.org/IImageService/GetAllUserImageIdsResponse")]
        System.Threading.Tasks.Task<long[]> GetAllUserImageIdsAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/GetMetadata", ReplyAction="http://tempuri.org/IImageService/GetMetadataResponse")]
        MvcApplication1.ImageService.Image GetMetadata(long imageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/GetMetadata", ReplyAction="http://tempuri.org/IImageService/GetMetadataResponse")]
        System.Threading.Tasks.Task<MvcApplication1.ImageService.Image> GetMetadataAsync(long imageId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImageServiceChannel : MvcApplication1.ImageService.IImageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImageServiceClient : System.ServiceModel.ClientBase<MvcApplication1.ImageService.IImageService>, MvcApplication1.ImageService.IImageService {
        
        public ImageServiceClient() {
        }
        
        public ImageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string DownloadImage(long imageId) {
            return base.Channel.DownloadImage(imageId);
        }
        
        public System.Threading.Tasks.Task<string> DownloadImageAsync(long imageId) {
            return base.Channel.DownloadImageAsync(imageId);
        }
        
        public long[] GetAllUserImageIds(string userName) {
            return base.Channel.GetAllUserImageIds(userName);
        }
        
        public System.Threading.Tasks.Task<long[]> GetAllUserImageIdsAsync(string userName) {
            return base.Channel.GetAllUserImageIdsAsync(userName);
        }
        
        public MvcApplication1.ImageService.Image GetMetadata(long imageId) {
            return base.Channel.GetMetadata(imageId);
        }
        
        public System.Threading.Tasks.Task<MvcApplication1.ImageService.Image> GetMetadataAsync(long imageId) {
            return base.Channel.GetMetadataAsync(imageId);
        }
    }
}

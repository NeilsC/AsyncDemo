//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.Async.ImageService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ImageService.IImageService")]
    public interface IImageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/DownloadImage", ReplyAction="http://tempuri.org/IImageService/DownloadImageResponse")]
        string DownloadImage(long imageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/DownloadImage", ReplyAction="http://tempuri.org/IImageService/DownloadImageResponse")]
        System.Threading.Tasks.Task<string> DownloadImageAsync(long imageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/GetMetadata", ReplyAction="http://tempuri.org/IImageService/GetMetadataResponse")]
        Entities.Image GetMetadata(long imageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/GetMetadata", ReplyAction="http://tempuri.org/IImageService/GetMetadataResponse")]
        System.Threading.Tasks.Task<Entities.Image> GetMetadataAsync(long imageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/GetAllUserImageIds", ReplyAction="http://tempuri.org/IImageService/GetAllUserImageIdsResponse")]
        long[] GetAllUserImageIds(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/GetAllUserImageIds", ReplyAction="http://tempuri.org/IImageService/GetAllUserImageIdsResponse")]
        System.Threading.Tasks.Task<long[]> GetAllUserImageIdsAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImageServiceChannel : Client.Async.ImageService.IImageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImageServiceClient : System.ServiceModel.ClientBase<Client.Async.ImageService.IImageService>, Client.Async.ImageService.IImageService {
        
        public ImageServiceClient() {
        }
        
        public ImageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string DownloadImage(long imageId) {
            return base.Channel.DownloadImage(imageId);
        }
        
        public System.Threading.Tasks.Task<string> DownloadImageAsync(long imageId) {
            return base.Channel.DownloadImageAsync(imageId);
        }
        
        public Entities.Image GetMetadata(long imageId) {
            return base.Channel.GetMetadata(imageId);
        }
        
        public System.Threading.Tasks.Task<Entities.Image> GetMetadataAsync(long imageId) {
            return base.Channel.GetMetadataAsync(imageId);
        }
        
        public long[] GetAllUserImageIds(string userName) {
            return base.Channel.GetAllUserImageIds(userName);
        }
        
        public System.Threading.Tasks.Task<long[]> GetAllUserImageIdsAsync(string userName) {
            return base.Channel.GetAllUserImageIdsAsync(userName);
        }
    }
}
